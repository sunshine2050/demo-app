trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Install_Docker
  displayName: Install Docker
  jobs:
  - job: Install_Docker
    displayName: Install Docker
    pool: Ubuntu
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '19.03.8'

- stage: Modify_DB_conf
  displayName: Modify DB configuration
  dependsOn: Install_Docker
  jobs:
  - job: Modify_DB_conf
    displayName: Modify DB configuration
    pool: Ubuntu
    variables: 
    - group: TeraformEnvVars
    steps:
    - script: |
        set -e
        echo "DB_USER: \"$TF_VAR_db_user\"" >> db_conf.yaml
        echo "DB_PASS: \"$TF_VAR_db_pass\"" >> db_conf.yaml
        cat db_conf.yaml
      name: 'Configure_DB'
      displayName: 'Pass DB_USER and DB_PASS to our application'
      env:
        TF_VAR_db_user: $(DB_USER)
        TF_VAR_db_pass: $(DB_PASS)

- stage: Build
  displayName: Build image
  dependsOn: Modify_DB_conf
  jobs:  
  - job: Build
    displayName: Build
    pool: Ubuntu
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker Hub'
        repository: 'sunshine2050/demo-app'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
- stage: Provision
  displayName: 'Terraforming on Azure...'
  dependsOn: Build
  jobs:
  - job: Provision
    displayName: 'Provisioning Container Instance'
    pool: Ubuntu
    variables: 
    - group: TeraformEnvVars
    steps:
    - script: |
        set -e
        terraform init -input=false
        terraform apply -input=false -auto-approve
      name: 'RunTerraform'
      displayName: 'Run Terraform'
      env:
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
        TF_VAR_image_build: $(tag)
        TF_VAR_db_user: $(DB_USER)
        TF_VAR_db_pass: $(DB_PASS)
